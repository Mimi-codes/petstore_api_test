{
	"info": {
		"_postman_id": "dd762361-92fb-43c3-946d-a69c3514294d",
		"name": "Swagger-Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30840973"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "createWithList",
					"item": [
						{
							"name": "Creates list of users with given input array",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"let jsonResponse = pm.response.json();\r",
											"\r",
											"// Validate Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate Response Structure\r",
											"pm.test(\"Response contains expected fields\", function () {\r",
											"    pm.expect(jsonResponse).to.have.property(\"code\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"type\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate Field Data Types\r",
											"pm.test(\"Field data types are correct\", function () {\r",
											"    pm.expect(jsonResponse.code).to.be.a(\"number\");\r",
											"    pm.expect(jsonResponse.type).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.message).to.be.a(\"string\"); // Message is a string\r",
											"});\r",
											"\r",
											"\r",
											"// Validate `type` is \"unknown\"\r",
											"pm.test(\"Type is 'unknown'\", function () {\r",
											"    pm.expect(jsonResponse.type).to.eql(\"unknown\");\r",
											"});\r",
											"\r",
											"// Validate `message` Contains a Numeric Value\r",
											"pm.test(\"Message\", function () {\r",
											"    pm.expect(jsonResponse.message).to.equal('ok'); // Ensures message is a numeric string\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": \"2\",\n    \"username\": \"{{finalUsername}}\",\n    \"firstName\": \"{{firstname}}\",\n    \"lastName\": \"{{lastname}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"2\"\n  }\n//   {\n//     \"id\": \"<long>\",\n//     \"username\": \"<string>\",\n//     \"firstName\": \"<string>\",\n//     \"lastName\": \"<string>\",\n//     \"email\": \"<string>\",\n//     \"password\": \"<string>\",\n//     \"phone\": \"<string>\",\n//     \"userStatus\": \"<integer>\"\n//   }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/createWithList",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithList"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/createWithList",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"createWithList"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let firstName = 'Akeelah'\r",
											"let lastName = 'Doe'\r",
											"let date = new Date().getTime()\r",
											"let email = 'akeelah@yopmail.com'\r",
											"let password = \"Akeelah@123\"\r",
											"let phone_no = '08123456789'\r",
											"let userName = 'Akeelah'\r",
											"\r",
											"let finalUsername = userName + date\r",
											"console.log(finalUsername)\r",
											"pm.environment.set(\"email\", email);\r",
											"pm.environment.set(\"password\", password);\r",
											"pm.environment.set(\"phone\", phone_no);\r",
											"pm.environment.set(\"firstname\", firstName);\r",
											"pm.environment.set(\"finalUsername\", finalUsername);\r",
											"pm.environment.set(\"lastname\", lastName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains expected values\", function () {\r",
											"    let responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"code\", 200);\r",
											"    pm.expect(responseBody).to.have.property(\"type\", \"unknown\");\r",
											"    pm.expect(responseBody).to.have.property(\"message\", \"2\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"2\",\n  \"username\": \"{{finalUsername}}\",\n  \"firstName\": \"{{firstname}}\",\n  \"lastName\": \"{{lastname}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": \"2\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "login",
					"item": [
						{
							"name": "Logs user into the system",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"let jsonResponse = pm.response.json();\r",
											"\r",
											"// Validate Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate Response Structure\r",
											"pm.test(\"Response contains expected fields\", function () {\r",
											"    pm.expect(jsonResponse).to.have.property(\"code\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"type\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Type is 'unknown'\", function () {\r",
											"    pm.expect(jsonResponse.type).to.eql(\"unknown\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message contains 'logged in user session:'\", function () {\r",
											"    pm.expect(jsonResponse.message).to.include(\"logged in user session:\");\r",
											"});\r",
											"\r",
											"// Extract and Validate Session ID\r",
											"pm.test(\"Session ID is a valid number\", function () {\r",
											"    let sessionId = jsonResponse.message.split(\":\")[1]; // Extract session ID\r",
											"    pm.expect(sessionId).to.match(/^\\d+$/); // Check if it's a number\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/login?username={{finalUsername}}&password={{password}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "{{finalUsername}}",
											"description": "(Required) The user name for login"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"description": "(Required) The password for login in clear text"
										}
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) The user name for login"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) The password for login in clear text"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "X-Expires-After",
											"value": "<dateTime>",
											"description": {
												"content": "date in UTC when token expires",
												"type": "text/plain"
											}
										},
										{
											"key": "X-Rate-Limit",
											"value": "<integer>",
											"description": {
												"content": "calls per hour allowed by the user",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<string>"
								},
								{
									"name": "Invalid username/password supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) The user name for login"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) The password for login in clear text"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "logout",
					"item": [
						{
							"name": "Logs out current logged in user session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"let jsonResponse = pm.response.json();\r",
											"\r",
											"// Validate Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate Response Structure\r",
											"pm.test(\"Response contains expected fields\", function () {\r",
											"    pm.expect(jsonResponse).to.have.property(\"code\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"type\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate Field Data Types\r",
											"pm.test(\"Field data types are correct\", function () {\r",
											"    pm.expect(jsonResponse.code).to.be.a(\"number\");\r",
											"    pm.expect(jsonResponse.type).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.message).to.be.a(\"string\"); // Message is a string\r",
											"});\r",
											"\r",
											"\r",
											"// Validate `type` is \"unknown\"\r",
											"pm.test(\"Type is 'unknown'\", function () {\r",
											"    pm.expect(jsonResponse.type).to.eql(\"unknown\");\r",
											"});\r",
											"\r",
											"// Validate `message` Contains a Numeric Value\r",
											"pm.test(\"Message\", function () {\r",
											"    pm.expect(jsonResponse.message).to.equal('ok'); // Ensures message is a numeric string\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"logout"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "createWithArray",
					"item": [
						{
							"name": "Creates list of users with given input array",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": \"2\",\n    \"username\": \"{{finalUsername}}\",\n    \"firstName\": \"{{firstname}}\",\n    \"lastName\": \"{{lastname}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": \"2\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/createWithArray",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithArray"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/createWithArray",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"createWithArray"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "{username}",
					"item": [
						{
							"name": "Get user by user name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"let jsonResponse = pm.response.json();\r",
											"\r",
											"// Validate Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate Response Structure\r",
											"pm.test(\"Response contains all required fields\", function () {\r",
											"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"username\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"firstName\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"lastName\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"email\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"password\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"phone\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"userStatus\");\r",
											"});\r",
											"\r",
											"// Validate Field Data Types\r",
											"pm.test(\"Field data types are correct\", function () {\r",
											"    pm.expect(jsonResponse.id).to.be.a(\"number\");\r",
											"    pm.expect(jsonResponse.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.email).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.password).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.phone).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.userStatus).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"// Validate Email Format\r",
											"pm.test(\"Email format is valid\", function () {\r",
											"    pm.expect(jsonResponse.email).to.match(/^[\\w.-]+@[a-z\\d.-]+\\.[a-z]{2,}$/);\r",
											"});\r",
											"\r",
											"// Validate Phone Number Format (Assuming a 10-15 digit numeric phone)\r",
											"pm.test(\"Phone number format is valid\", function () {\r",
											"    pm.expect(jsonResponse.phone).to.match(/^\\d{11}$/);\r",
											"});\r",
											"\r",
											"// Validate Username is Not Empty\r",
											"pm.test(\"Username is not empty\", function () {\r",
											"    pm.expect(jsonResponse.username).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// Validate Password Contains Letters, Numbers, and Special Characters\r",
											"pm.test(\"Password meets security requirements\", function () {\r",
											"    pm.expect(jsonResponse.password).to.match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/);\r",
											"});\r",
											"\r",
											"// Validate User Status (Assuming valid values are 1 or 2)\r",
											"pm.test(\"User status is valid (1 or 2)\", function () {\r",
											"    pm.expect(jsonResponse.userStatus).to.be.oneOf([1, 2]);\r",
											"});\r",
											"\r",
											"// Validate Email Format using regex\r",
											"pm.test(\"Email format is valid\", function () {\r",
											"    pm.expect(jsonResponse.email).to.match(/^akeelah@yopmail\\.com$/);\r",
											"});\r",
											"\r",
											"// Save a specific value (e.g., message, username, token) as an environment variable\r",
											"pm.environment.set(\"savedUsername\", jsonResponse.username);\r",
											"\r",
											"// Log the saved value for debugging\r",
											"console.log(\"Saved Username:\", pm.environment.get(\"savedUsername\"));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "{{finalUsername}}",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
								},
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Updated user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"let jsonResponse = pm.response.json();\r",
											"\r",
											"// Validate Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate Response Structure\r",
											"pm.test(\"Response contains expected fields\", function () {\r",
											"    pm.expect(jsonResponse).to.have.property(\"code\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"type\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate Field Data Types\r",
											"pm.test(\"Field data types are correct\", function () {\r",
											"    pm.expect(jsonResponse.code).to.be.a(\"number\");\r",
											"    pm.expect(jsonResponse.type).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.message).to.be.a(\"string\"); // Message is a string\r",
											"});\r",
											"\r",
											"// Validate `code` Value is 200\r",
											"pm.test(\"Code is 200\", function () {\r",
											"    pm.expect(jsonResponse.code).to.eql(200);\r",
											"});\r",
											"\r",
											"// Validate `type` is \"unknown\"\r",
											"pm.test(\"Type is 'unknown'\", function () {\r",
											"    pm.expect(jsonResponse.type).to.eql(\"unknown\");\r",
											"});\r",
											"\r",
											"// Validate `message` Contains a Numeric Value\r",
											"pm.test(\"Message contains a valid number\", function () {\r",
											"    pm.expect(jsonResponse.message).to.match(/^\\d+$/); // Ensures message is a numeric string\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let firstName = 'Miller'\r",
											"let lastName = 'Doe'\r",
											"let date = new Date().getTime()\r",
											"let email = 'miller@yopmail.com'\r",
											"// let email_suffix = '@yopmail.com'\r",
											"let password = \"Miller@123\"\r",
											"let phone_no = '08123456789'\r",
											"let userName = 'Miller'\r",
											"\r",
											"// let final_firstname = firstName + date\r",
											"// let final_lastname = lastName + date\r",
											"// let final_email = email_prefix + date + email_suffix\r",
											"// console.log(final_email)\r",
											"// console.log(final_firstname)\r",
											"// console.log(final_lastname)\r",
											"pm.environment.set(\"updatedEmail\", email);\r",
											"pm.environment.set(\"updatedPassword\", password);\r",
											"pm.environment.set(\"updatedPhone\", phone_no);\r",
											"pm.environment.set(\"updatedUsername\", userName);\r",
											"pm.environment.set(\"updatedFirstname\", firstName);\r",
											"pm.environment.set(\"updatedLastname\", lastName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"5\",\n  \"username\": \"{{updatedUsername}}\",\n  \"firstName\": \"{{updatedFirstname}}\",\n  \"lastName\": \"{{updatedLastname}}\",\n  \"email\": \"{{updatedEmail}}\",\n  \"password\": \"{{updatedPassword}}\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": \"8\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "{{finalUsername}}",
											"description": "(Required) name that need to be updated"
										}
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "Invalid user supplied",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON\r",
											"let jsonResponse = pm.response.json();\r",
											"\r",
											"// Save the `message` value as a Postman environment variable\r",
											"pm.environment.set(\"messageVal\", jsonResponse.message);\r",
											"\r",
											"// Validate Status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate Response Structure\r",
											"pm.test(\"Response contains expected fields\", function () {\r",
											"    pm.expect(jsonResponse).to.have.property(\"code\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"type\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate Field Data Types\r",
											"pm.test(\"Field data types are correct\", function () {\r",
											"    pm.expect(jsonResponse.code).to.be.a(\"number\");\r",
											"    pm.expect(jsonResponse.type).to.be.a(\"string\");\r",
											"    pm.expect(jsonResponse.message).to.be.a(\"string\"); // Message is a string\r",
											"});\r",
											"\r",
											"// Validate `type` is \"unknown\"\r",
											"pm.test(\"Type is 'unknown'\", function () {\r",
											"    pm.expect(jsonResponse.type).to.eql(\"unknown\");\r",
											"});\r",
											"\r",
											"// Validate `message` Matches Stored Value\r",
											"pm.test(\"Message value matches saved variable\", function () {\r",
											"    pm.expect(jsonResponse.message).to.equal(pm.environment.get(\"messageVal\"));\r",
											"});\r",
											"\r",
											"// Log the stored message value\r",
											"console.log(\"Saved message value:\", pm.environment.get(\"messageVal\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "{{savedUsername}}",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2"
		},
		{
			"key": "messageValue",
			"value": ""
		}
	]
}